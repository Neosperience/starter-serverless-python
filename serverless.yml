service: starter-serverless-python-v1

package:
    exclude:
        - .git/**
        - .serveless/**
        - node_modules/**
        - temp/**
        - src/spec/**
        - .*
        - deploy.sh
        - package.json
        - package-lock.json
        - requirements.txt
        - dev_requirements.txt
        - tox.ini
    include:
        - config/config.json

provider:
    name: aws
    runtime: python3.6
    stage: ${env:SERVERLESS_STAGE}
    region: ${env:SERVERLESS_REGION}
    versionFunctions: false

plugins:
    - serverless-python-requirements

custom:
    accountId: ${env:SERVERLESS_ACCOUNT_ID}
    authorizer:
        arn: arn:aws:lambda:${self:provider.region}:${self:custom.accountId}:function:nsp-identity-services-v1-${self:provider.stage}-custom-authorizer
        resultTtlInSeconds: 300
        identitySource: method.request.header.Authorization

resources:
    Resources:
        BasePathMapping:
            Type: "AWS::ApiGateway::BasePathMapping"
            Properties:
                BasePath: v1
                DomainName: ${env:SERVERLESS_CUSTOM_DOMAIN_NAME_BASE_DOMAIN_NAME}
                RestApiId:
                    Ref: ApiGatewayRestApi
                Stage: ${self:provider.stage}

functions:
    create-thing:
        handler: src/thing/lambdas/create_thing.handler
        timeout: 30
        events:
            - http:
                path: thing
                method: post
                cors: true
                authorizer: ${self:custom.authorizer}
    get-thing:
        handler: src/thing/lambdas/get_thing.handler
        timeout: 30
        events:
            - http:
                path: thing/{uuid}
                method: get
                cors: true
                authorizer: ${self:custom.authorizer}
    update-thing:
        handler: src/thing/lambdas/update_thing.handler
        timeout: 30
        events:
            - http:
                path: thing/{uuid}
                method: put
                cors: true
                authorizer: ${self:custom.authorizer}
    delete-thing:
        handler: src/thing/lambdas/delete_thing.handler
        timeout: 30
        events:
            - http:
                path: thing/{uuid}
                method: delete
                cors: true
                authorizer: ${self:custom.authorizer}
    list-things:
        handler: src/thing/lambdas/list_things.handler
        timeout: 30
        events:
            - http:
                path: thing
                method: get
                cors: true
                authorizer: ${self:custom.authorizer}
